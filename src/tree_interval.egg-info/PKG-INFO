Metadata-Version: 2.1
Name: tree-interval
Version: 0.1.0
Summary: A Python package for managing and visualizing interval tree structures
Home-page: https://github.com/kairos-xx/tree-interval
Author: Joao Lopes
Author-email: Joao Lopes <joaoslopes@gmail.com>
License: 
        MIT License
        
        Copyright (c) 2024 Replit User
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/kairos-xx/tree-interval
Project-URL: Repository, https://github.com/kairos-xx/tree-interval.git
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pytest==8.3.4


# Tree Interval

A Python package for managing and visualizing interval tree structures with AST analysis capabilities.

## Overview

Tree Interval provides tools for:
- Building and analyzing tree structures
- AST (Abstract Syntax Tree) parsing and visualization
- Frame analysis for runtime code inspection
- Position-aware node tracking
- Customizable tree visualization
- JSON serialization/deserialization

## Similar Packages
- `ast`: Python's built-in AST module (Tree Interval builds upon this)
- `anytree`: General purpose tree structures
- `treelib`: Tree data structure implementation

## Installation

```bash
pip install tree-interval
```

## Quick Start

```python
from tree_interval import Tree, Leaf, Position

# Create a basic tree
tree = Tree("Example")
root = Leaf(Position(0, 100, "Root"))
child = Leaf(Position(10, 50, "Child"))

tree.root = root
tree.add_leaf(child)

# Visualize the tree
tree.visualize()
```

## Features

### Position-Aware Nodes
```python
position = Position(start=0, end=100, info="Root")
position.lineno = 1
position.end_lineno = 5
position.col_offset = 0
position.end_col_offset = 100
```

### AST Analysis
```python
from tree_interval import AstTreeBuilder

code = """
def factorial(n):
    return 1 if n <= 1 else n * factorial(n-1)
"""
builder = AstTreeBuilder(code)
ast_tree = builder.build()
ast_tree.visualize()
```

### Frame Analysis
```python
from tree_interval import FrameAnalyzer
import sys

frame = sys._getframe()
analyzer = FrameAnalyzer(frame)
current_node = analyzer.find_current_node()
```

## API Reference

### Tree
- `Tree(source: T, start_lineno: Optional[int] = None, indent_size: int = 4)`
- `add_leaf(leaf: Leaf) -> None`
- `find_best_match(start: int, end: int) -> Optional[Leaf]`
- `visualize(config: Optional[VisualizationConfig] = None) -> None`

### Leaf
- `Leaf(position: Union[Position, tuple[int, int, Any], int])`
- `add_child(child: Leaf) -> None`
- `find_best_match(start: int, end: int) -> Optional[Leaf]`

### Position
- `Position(start: Optional[int], end: Optional[int], info: Optional[Any])`
- Properties: `lineno`, `end_lineno`, `col_offset`, `end_col_offset`

## Potential Use Cases
- Code analysis tools
- Syntax highlighters
- Code structure visualization
- Runtime code inspection
- AST-based code transformations

## Limitations
- Memory usage scales with tree size
- Visualization may become cluttered with large trees
- AST analysis limited to Python code
- Frame analysis requires careful handling of stack frames

## License
MIT License - See LICENSE file for details
